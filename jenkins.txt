pipeline {
    agent any

    parameters {
        string(name: 'ROLLBACK_VERSION', defaultValue: '', description: 'Specify version to roll back if needed')
    }

    environment {
        IMAGE_NAME = "wb01"
        IMAGE_TAG = "${params.ROLLBACK_VERSION ?: BUILD_NUMBER}" // Use rollback version or build number
        DOCKER_REPO = "jnims07/wb01" // Replace with your actual Docker Hub repository
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/Nimesh-WB/testcicd.git'
            }
        }

        stage('Update Version File') {
            steps {
                script {
                    // Update VERSION.txt with the current version number
                    writeFile file: 'VERSION.txt', text: "${IMAGE_TAG}"
                    
                    // Commit and push the updated VERSION.txt to GitHub
                    bat '''
                    git config user.email "nimesh.jethva@wonderbiz.in"
                    git config user.name "Nimesh-WB"
                    git add VERSION.txt
                    git commit -m "Update version to ${IMAGE_TAG}"
                    git push origin master
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'manualCICD', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        // Build the Docker image
                        bat "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                        
                        // Log in to Docker Hub
                        bat 'docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD%'
                        
                        // Tag the Docker image for pushing
                        bat "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_REPO}:${IMAGE_TAG}"
                        
                        // Push the Docker image
                        bat "docker push ${DOCKER_REPO}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Clean Up Kubernetes Resources') {
            steps {
                script {
                    // Set Minikube context
                    bat 'kubectl config use-context minikube'

                    // Delete existing deployment and service if they exist
                    bat 'kubectl delete deployment wb01-deployment --ignore-not-found=true'
                    bat 'kubectl delete service wb01-service --ignore-not-found=true'
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                script {
                    // Update deployment image and apply the new configuration
                    bat """
                    kubectl set image deployment/wb01-deployment wb01-container=${DOCKER_REPO}:${IMAGE_TAG} --record
                    kubectl rollout status deployment/wb01-deployment
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        failure {
            echo 'Build failed, consider rolling back if necessary'
        }
        success {
            echo "Deployment of version ${IMAGE_TAG} successful."
        }
    }
}
